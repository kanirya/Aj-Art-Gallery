@{
    ViewData["Title"] = "Art Gallery";
    Layout = "_Layout"; // Remove or change if your layout differs
    ViewData["css"]="Index";
}

@{
    var artGategory = new List<string>
    {
        "Sketching",
        "Water color Painting",
        "Old painting",
        "Sculptures",
        "PhotoGraphy",
        "Digital Art",
        "Calligraphy",
        "NFTs"
    };
}
<style>
</style>

<main style="box-shadow:0 6px 20px color-mix(in oklab, black 12%, transparent);">
    <section class="hero">
        <div class="container hero-wrap">
            <div>
                <div class="hero-pill" aria-hidden="true">
                    <span>Curated • Contemporary • Global</span>
                </div>
                <h1 class="hero-headline" style="margin:.6rem 0 0.4rem">
                    Discover and Collect Museum‑Quality Art
                </h1>
                <p class="hero-sub">
                    Explore a global catalog of original paintings, sculptures, and fine art photography.
                    Follow your favorite artists, build collections, and inquire directly—presented in a
                    beautiful, Pinterest‑style showcase.
                </p>
                <div style="display:flex; gap:.6rem; margin-top:1rem">
                    <a class="custom-btn" asp-action="Explore">Explore Art</a>

                </div>
            </div>
            <aside class="hero-card" aria-label="Featured Works Preview">
                <div class="hero-grid">

                    <img src="~/images/art1.jpeg" alt="Ocean-inspired abstract" loading="lazy" />
                   
                            <canvas id="drawingCanvas"></canvas>
                            <div class="canvas-overlay"></div>
                 
                    @* <img src="https://images.unsplash.com/photo-1518770660439-4636190af475?q=80&w=600&auto=format&fit=crop" alt="Minimal sculpture in white" loading="lazy" /> *@
                    <img src="~/images/art2.jpeg" alt="Deep blue abstract painting" loading="lazy" />
                </div>
            </aside>
        </div>
    </section>



    <dialog id="lightbox" class="lightbox" aria-label="Artwork detail">
        <button class="close-x" data-close aria-label="Close">✕</button>
        <div class="lightbox-grid">
            <div class="lightbox-media">
                <img id="lbImg" src="/placeholder.svg" alt="" />
            </div>
            <div class="lightbox-body">
                <h2 id="lbTitle" style="margin:0"></h2>
                <div class="lb-meta" id="lbArtist"></div>
                <div class="lb-meta" id="lbMedium"></div>
                <div class="lb-meta" id="lbPrice" style="font-weight:700; color: var(--accent)"></div>
                <div class="lb-row" style="margin-top:.6rem">
                    <div class="lb-actions">
                        <button class="btn primary" id="lbInquire">Inquire</button>
                        <button class="btn" id="lbCollect">Add to Collection</button>
                    </div>
                    <button class="like" id="lbLike" aria-pressed="false" aria-label="Like">♥</button>
                </div>
            </div>
        </div>
    </dialog>

    <div class="container">
        <h3 class="mt-1">Explore Featured Artworks</h3>

        <div class="container py-4">

            <div class="row g-2 justify-content-center">
                @{
                    for (int i = 1; i <= 8; i++)
                    {
                        <div class="col-6 col-sm-6 col-md-4 col-lg-3 col-xl-3 d-flex justify-content-center">
                            <div class="featured-art-card">
                                <div class="art-image">
                                    <img src="~/images/art2.jpeg" alt="feature art work" />
                                </div>
                                <div class="art-info">
                                    <p class="title">Timeless</p>
                                    <p class="subtitle">By Danish Kaneria</p>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>


    </div>

    <hr class="" />
    <section id="artCategory">
        <div class="container py-1">
            <h4>Art Categories</h4>
            <div class="category-meta">
                @{
                    foreach (var item in artGategory)
                    {
                        <span class="category-badge">@item</span>
                    }
                }
            </div>
        </div>
    </section>

    <!-- NEW: Gallery Stats Section -->
    <hr class="" />
    <section id="galleryStats" class="stats-section">
        <div class="container py-4">
            <h3 style="text-align: center; margin-bottom: 2rem;">By The Numbers</h3>
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">5,000+</div>
                    <div class="stat-label">Artworks</div>
                    <p class="stat-description">Carefully curated pieces from emerging and established artists</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">800+</div>
                    <div class="stat-label">Artists</div>
                    <p class="stat-description">Talented creators from 45+ countries worldwide</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">12K+</div>
                    <div class="stat-label">Collectors</div>
                    <p class="stat-description">Art enthusiasts building meaningful collections</p>
                </div>
                <div class="stat-card">
                    <div class="stat-number">$2M+</div>
                    <div class="stat-label">In Sales</div>
                    <p class="stat-description">Supporting artists and collectors globally</p>
                </div>
            </div>
        </div>
    </section>

    <!-- NEW: Upcoming Exhibitions Section -->
    <hr class="" />
    <section id="upcomingExhibitions" class="exhibitions-section">
        <div class="container py-4">
            <h3 style="margin-bottom: 2rem;">Upcoming Exhibitions</h3>
            <div class="exhibitions-grid">
                <div class="exhibition-card">
                    <div class="exhibition-image">
                        <img src="https://images.unsplash.com/photo-1561214115-6d2f1b0609fa?q=80&w=600&auto=format&fit=crop" alt="Abstract Horizons Exhibition" />
                        <span class="exhibition-badge">March 15 - April 30</span>
                    </div>
                    <div class="exhibition-info">
                        <h4>Abstract Horizons</h4>
                        <p>Explore the intersection of color, form, and emotion through contemporary abstract works.</p>
                        <a href="#" class="exhibition-link">Learn More →</a>
                    </div>
                </div>
                <div class="exhibition-card">
                    <div class="exhibition-image">
                        <img src="https://images.unsplash.com/photo-1578926078328-123456789012?q=80&w=600&auto=format&fit=crop" alt="Sculptural Visions Exhibition" />
                        <span class="exhibition-badge">April 5 - May 20</span>
                    </div>
                    <div class="exhibition-info">
                        <h4>Sculptural Visions</h4>
                        <p>Three-dimensional masterpieces that challenge perception and redefine space.</p>
                        <a href="#" class="exhibition-link">Learn More →</a>
                    </div>
                </div>
                <div class="exhibition-card">
                    <div class="exhibition-image">
                        <img src="https://images.unsplash.com/photo-1578926078328-987654321098?q=80&w=600&auto=format&fit=crop" alt="Digital Dreams Exhibition" />
                        <span class="exhibition-badge">May 1 - June 15</span>
                    </div>
                    <div class="exhibition-info">
                        <h4>Digital Dreams</h4>
                        <p>Cutting-edge digital art and NFTs showcasing the future of creative expression.</p>
                        <a href="#" class="exhibition-link">Learn More →</a>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- NEW: Why Choose Us Section -->
    <hr class="" />
    <section id="whyChooseUs" class="why-choose-section">
        <div class="container py-4">
            <h3 style="text-align: center; margin-bottom: 2rem;">Why Choose Our Gallery</h3>
            <div class="why-choose-grid">
                <div class="why-card">
                    <div class="why-icon">🎨</div>
                    <h4>Curated Selection</h4>
                    <p>Every piece is hand-selected by our expert team to ensure museum-quality standards.</p>
                </div>
                <div class="why-card">
                    <div class="why-icon">🌍</div>
                    <h4>Global Artists</h4>
                    <p>Discover emerging and established artists from around the world in one place.</p>
                </div>
                <div class="why-card">
                    <div class="why-icon">✓</div>
                    <h4>Authenticity Guaranteed</h4>
                    <p>Every artwork comes with a certificate of authenticity and provenance documentation.</p>
                </div>
                <div class="why-card">
                    <div class="why-icon">💬</div>
                    <h4>Direct Artist Connection</h4>
                    <p>Inquire directly with artists, commission custom works, and build lasting relationships.</p>
                </div>
                <div class="why-card">
                    <div class="why-icon">📦</div>
                    <h4>Secure Shipping</h4>
                    <p>Professional packaging and insured shipping to ensure your art arrives safely.</p>
                </div>
                <div class="why-card">
                    <div class="why-icon">🤝</div>
                    <h4>Expert Support</h4>
                    <p>Our team is here to help with collection advice, valuations, and art consultation.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- NEW: Testimonials Section -->
    <hr class="" />
    <section id="testimonials" class="testimonials-section">
        <div class="container py-4">
            <h3 style="text-align: center; margin-bottom: 2rem;">What Collectors Say</h3>
            <div class="testimonials-grid">
                <div class="testimonial-card">
                    <div class="testimonial-stars">★★★★★</div>
                    <p class="testimonial-text">"I've been collecting art for 20 years, and this gallery has the finest curation I've seen. The quality and authenticity are unmatched."</p>
                    <div class="testimonial-author">
                        <strong>Sarah Mitchell</strong>
                        <span>Art Collector, New York</span>
                    </div>
                </div>
                <div class="testimonial-card">
                    <div class="testimonial-stars">★★★★★</div>
                    <p class="testimonial-text">"Finding emerging artists has never been easier. The platform is intuitive, and the support team is incredibly helpful."</p>
                    <div class="testimonial-author">
                        <strong>James Chen</strong>
                        <span>Gallery Owner, San Francisco</span>
                    </div>
                </div>
                <div class="testimonial-card">
                    <div class="testimonial-stars">★★★★★</div>
                    <p class="testimonial-text">"As an artist, I appreciate how this gallery values and promotes our work. The exposure and sales have been fantastic."</p>
                    <div class="testimonial-author">
                        <strong>Elena Rodriguez</strong>
                        <span>Contemporary Artist, Barcelona</span>
                    </div>
                </div>
            </div>
        </div>
    </section>

 


    <hr class="" />
    <section id="featuredArtist">
        <div class="container">
            <h4>Featured Artist</h4>
            <div class="artist-card">
                <div class="artist-image">
                    <img src="/images/art3.jpeg" alt="Artist Name">
                </div>
                <div class="artist-info">
                    <h5>Leonardo Cruz</h5>
                    <p>
                        A contemporary painter blending abstract expressionism with realism.
                        His works explore light, human emotion, and the tension between chaos and order.
                    </p>
                    <a asp-action="Artists" class="like ghost">More Artists</a>
                </div>
            </div>
        </div>
    </section>
    <!-- Location Section -->
    <section class="location-section" id="location">
        <div class="location-container">
            <div class="section-header fade-in-up">
                <span class="section-label">Visit Us</span>
                <h2 class="section-title">Our Gallery Location</h2>
            </div>

            <div class="location-grid">
                <div class="location-map slide-in-left">
                    <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3329.9773893801325!2d73.1233283!3d33.5511989!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x38dfed6853095969%3A0x8e713f19a9fde97e!2sNorthern%20Heights!5e0!3m2!1sen!2s!4v1735182400000!5m2!1sen!2s"
                            width="600"
                            height="450"
                            style="border:0;"
                            allowfullscreen=""
                            loading="lazy"
                            referrerpolicy="no-referrer-when-downgrade">
                    </iframe>
                </div>

                <div class="location-info slide-in-right">
                    <h3>Find Us Here</h3>
                    <div class="location-details">
                        <div class="location-item">
                            <div class="location-icon">📍</div>
                            <div>
                                <h4>Address</h4>
                                <p>1250 Broadway, Suite 500<br>New York, NY 10001<br>United States</p>
                            </div>
                        </div>

                        <div class="location-item">
                            <div class="location-icon">🕐</div>
                            <div>
                                <h4>Hours</h4>
                                <p>Monday - Friday: 10:00 AM - 6:00 PM<br>Saturday: 11:00 AM - 7:00 PM<br>Sunday: 12:00 PM - 5:00 PM</p>
                            </div>
                        </div>

                        <div class="location-item">
                            <div class="location-icon">📞</div>
                            <div>
                                <h4>Contact</h4>
                                <p>Phone: (212) 555-0123<br>Email: info@artistry-gallery.com</p>
                            </div>
                        </div>

                        <div class="location-item">
                            <div class="location-icon">🚇</div>
                            <div>
                                <h4>Getting Here</h4>
                                <p>Easily accessible via subway (N, R, W lines)<br>Ample parking available nearby</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>


</main>

<footer class="site-footer">
    <div class="container" id="contact">
        <div style="display:grid; gap:.4rem">
            <div>© @DateTime.Now.Year Artfolio Gallery. All rights reserved.</div>
            <div>For inquiries: <a href="mailto:hello@artfolio.example">hello@artfolio.example</a></div>
        </div>
    </div>
</footer>


<script>
    class FaceDrawingAnimation {
        constructor(canvasId) {
            this.canvas = document.getElementById(canvasId);
            this.ctx = this.canvas.getContext('2d');
            this.animationId = null;
            this.isAnimating = false;
            this.setupCanvas();
            this.startAnimation();
            this.setupControls();
        }

        setupCanvas() {
            const dpr = window.devicePixelRatio || 1;
            const rect = this.canvas.getBoundingClientRect();
            this.canvas.width = rect.width * dpr;
            this.canvas.height = rect.height * dpr;
            this.ctx.scale(dpr, dpr);
            this.width = rect.width;
            this.height = rect.height;
        }

        setupControls() {
            document.getElementById('replayBtn').addEventListener('click', () => {
                this.startAnimation();
            });
        }

        startAnimation() {
            if (this.isAnimating) return;
            this.isAnimating = true;
            this.ctx.clearRect(0, 0, this.width, this.height);
            this.animateDrawing();
        }

        animateDrawing() {
            const startTime = Date.now();
            const duration = 8000; // 8 seconds for full animation

            const animate = () => {
                const elapsed = Date.now() - startTime;
                const progress = Math.min(elapsed / duration, 1);

                this.ctx.clearRect(0, 0, this.width, this.height);
                this.drawFace(progress);

                if (progress < 1) {
                    this.animationId = requestAnimationFrame(animate);
                } else {
                    // Loop animation
                    setTimeout(() => this.animateDrawing(), 2000);
                }
            };

            animate();
        }

        drawFace(progress) {
            const centerX = this.width / 2;
            const centerY = this.height / 2;
            const scale = Math.min(this.width, this.height) / 400;

            // Draw decorative circles (0-10% of animation)
            if (progress < 0.1) {
                this.drawDecorativeCircles(centerX, centerY, scale, progress / 0.1);
            } else {
                this.drawDecorativeCircles(centerX, centerY, scale, 1);
            }

            // Draw head outline (10-20%)
            if (progress >= 0.1) {
                const headProgress = Math.min((progress - 0.1) / 0.1, 1);
                this.drawHeadOutline(centerX, centerY, scale, headProgress);
            }

            // Draw hair (20-30%)
            if (progress >= 0.2) {
                const hairProgress = Math.min((progress - 0.2) / 0.1, 1);
                this.drawHair(centerX, centerY, scale, hairProgress);
            }

            // Draw left eye (30-40%)
            if (progress >= 0.3) {
                const eyeProgress = Math.min((progress - 0.3) / 0.1, 1);
                this.drawLeftEye(centerX, centerY, scale, eyeProgress);
            }

            // Draw right eye (40-50%)
            if (progress >= 0.4) {
                const eyeProgress = Math.min((progress - 0.4) / 0.1, 1);
                this.drawRightEye(centerX, centerY, scale, eyeProgress);
            }

            // Draw nose (50-60%)
            if (progress >= 0.5) {
                const noseProgress = Math.min((progress - 0.5) / 0.1, 1);
                this.drawNose(centerX, centerY, scale, noseProgress);
            }

            // Draw mouth (60-75%)
            if (progress >= 0.6) {
                const mouthProgress = Math.min((progress - 0.6) / 0.15, 1);
                this.drawMouth(centerX, centerY, scale, mouthProgress);
            }

            // Draw facial features (75-90%)
            if (progress >= 0.75) {
                const featureProgress = Math.min((progress - 0.75) / 0.15, 1);
                this.drawFacialFeatures(centerX, centerY, scale, featureProgress);
            }

            // Draw decorative elements (90-100%)
            if (progress >= 0.9) {
                const decorProgress = Math.min((progress - 0.9) / 0.1, 1);
                this.drawDecorations(centerX, centerY, scale, decorProgress);
            }
        }

        drawDecorativeCircles(x, y, scale, progress) {
            this.ctx.strokeStyle = `rgba(100, 200, 255, ${0.3 * progress})`;
            this.ctx.lineWidth = 2 * scale;

            for (let i = 0; i < 3; i++) {
                const radius = (150 + i * 50) * scale;
                const currentRadius = radius * progress;
                this.ctx.beginPath();
                this.ctx.arc(x, y, currentRadius, 0, Math.PI * 2);
                this.ctx.stroke();
            }
        }

        drawHeadOutline(x, y, scale, progress) {
            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.9)';
            this.ctx.lineWidth = 3 * scale;
            this.ctx.lineCap = 'round';
            this.ctx.lineJoin = 'round';

            const radius = 80 * scale;
            const startAngle = -Math.PI / 2;
            const endAngle = startAngle + Math.PI * 2 * progress;

            this.ctx.beginPath();
            this.ctx.arc(x, y, radius, startAngle, endAngle);
            this.ctx.stroke();
        }

        drawHair(x, y, scale, progress) {
            this.ctx.strokeStyle = 'rgba(200, 150, 100, 0.8)';
            this.ctx.lineWidth = 4 * scale;
            this.ctx.lineCap = 'round';

            const hairPoints = [
                { x: x - 60 * scale, y: y - 70 * scale },
                { x: x - 40 * scale, y: y - 85 * scale },
                { x: x, y: y - 90 * scale },
                { x: x + 40 * scale, y: y - 85 * scale },
                { x: x + 60 * scale, y: y - 70 * scale }
            ];

            const pointsToDraw = Math.ceil(hairPoints.length * progress);
            for (let i = 0; i < pointsToDraw - 1; i++) {
                this.ctx.beginPath();
                this.ctx.moveTo(hairPoints[i].x, hairPoints[i].y);
                this.ctx.lineTo(hairPoints[i + 1].x, hairPoints[i + 1].y);
                this.ctx.stroke();
            }
        }

        drawLeftEye(x, y, scale, progress) {
            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.9)';
            this.ctx.fillStyle = 'rgba(50, 50, 50, 0.8)';
            this.ctx.lineWidth = 2 * scale;

            const eyeX = x - 30 * scale;
            const eyeY = y - 20 * scale;
            const eyeWidth = 25 * scale * progress;
            const eyeHeight = 35 * scale * progress;

            // Eye outline
            this.ctx.beginPath();
            this.ctx.ellipse(eyeX, eyeY, eyeWidth, eyeHeight, 0, 0, Math.PI * 2);
            this.ctx.stroke();

            if (progress > 0.5) {
                // Iris
                this.ctx.beginPath();
                this.ctx.arc(eyeX, eyeY, eyeWidth * 0.6, 0, Math.PI * 2);
                this.ctx.fill();

                // Pupil
                this.ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
                this.ctx.beginPath();
                this.ctx.arc(eyeX + eyeWidth * 0.2, eyeY - eyeHeight * 0.2, eyeWidth * 0.2, 0, Math.PI * 2);
                this.ctx.fill();
            }
        }

        drawRightEye(x, y, scale, progress) {
            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.9)';
            this.ctx.fillStyle = 'rgba(50, 50, 50, 0.8)';
            this.ctx.lineWidth = 2 * scale;

            const eyeX = x + 30 * scale;
            const eyeY = y - 20 * scale;
            const eyeWidth = 25 * scale * progress;
            const eyeHeight = 35 * scale * progress;

            // Eye outline
            this.ctx.beginPath();
            this.ctx.ellipse(eyeX, eyeY, eyeWidth, eyeHeight, 0, 0, Math.PI * 2);
            this.ctx.stroke();

            if (progress > 0.5) {
                // Iris
                this.ctx.beginPath();
                this.ctx.arc(eyeX, eyeY, eyeWidth * 0.6, 0, Math.PI * 2);
                this.ctx.fill();

                // Pupil
                this.ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
                this.ctx.beginPath();
                this.ctx.arc(eyeX - eyeWidth * 0.2, eyeY - eyeHeight * 0.2, eyeWidth * 0.2, 0, Math.PI * 2);
                this.ctx.fill();
            }
        }

        drawNose(x, y, scale, progress) {
            this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.7)';
            this.ctx.lineWidth = 2 * scale;
            this.ctx.lineCap = 'round';

            const noseLength = 30 * scale * progress;
            this.ctx.beginPath();
            this.ctx.moveTo(x, y - 10 * scale);
            this.ctx.lineTo(x, y - 10 * scale + noseLength);
            this.ctx.stroke();

            // Nose tip
            if (progress > 0.5) {
                this.ctx.beginPath();
                this.ctx.moveTo(x - 8 * scale, y - 10 * scale + noseLength);
                this.ctx.lineTo(x + 8 * scale, y - 10 * scale + noseLength);
                this.ctx.stroke();
            }
        }

        drawMouth(x, y, scale, progress) {
            this.ctx.strokeStyle = 'rgba(255, 150, 150, 0.8)';
            this.ctx.lineWidth = 3 * scale;
            this.ctx.lineCap = 'round';
            this.ctx.lineJoin = 'round';

            const mouthY = y + 30 * scale;
            const mouthWidth = 40 * scale;

            // Smile curve
            this.ctx.beginPath();
            this.ctx.moveTo(x - mouthWidth * progress, mouthY);
            this.ctx.quadraticCurveTo(x, mouthY + 15 * scale * progress, x + mouthWidth * progress, mouthY);
            this.ctx.stroke();
        }

        drawFacialFeatures(x, y, scale, progress) {
            this.ctx.strokeStyle = `rgba(255, 200, 100, ${0.6 * progress})`;
            this.ctx.lineWidth = 1.5 * scale;

            // Blush on left cheek
            this.ctx.beginPath();
            this.ctx.arc(x - 50 * scale, y + 10 * scale, 15 * scale * progress, 0, Math.PI * 2);
            this.ctx.stroke();

            // Blush on right cheek
            this.ctx.beginPath();
            this.ctx.arc(x + 50 * scale, y + 10 * scale, 15 * scale * progress, 0, Math.PI * 2);
            this.ctx.stroke();

            // Eyebrows
            this.ctx.strokeStyle = `rgba(200, 150, 100, ${0.8 * progress})`;
            this.ctx.lineWidth = 2 * scale;

            // Left eyebrow
            this.ctx.beginPath();
            this.ctx.moveTo(x - 45 * scale, y - 45 * scale);
            this.ctx.quadraticCurveTo(x - 30 * scale, y - 50 * scale, x - 15 * scale, y - 45 * scale);
            this.ctx.stroke();

            // Right eyebrow
            this.ctx.beginPath();
            this.ctx.moveTo(x + 15 * scale, y - 45 * scale);
            this.ctx.quadraticCurveTo(x + 30 * scale, y - 50 * scale, x + 45 * scale, y - 45 * scale);
            this.ctx.stroke();
        }

        drawDecorations(x, y, scale, progress) {
            this.ctx.strokeStyle = `rgba(100, 200, 255, ${0.5 * progress})`;
            this.ctx.lineWidth = 1.5 * scale;

            // Decorative lines around face
            const decorPoints = 8;
            for (let i = 0; i < decorPoints; i++) {
                const angle = (Math.PI * 2 / decorPoints) * i;
                const startRadius = 110 * scale;
                const endRadius = 130 * scale;

                const startX = x + Math.cos(angle) * startRadius;
                const startY = y + Math.sin(angle) * startRadius;
                const endX = x + Math.cos(angle) * endRadius * progress;
                const endY = y + Math.sin(angle) * endRadius * progress;

                this.ctx.beginPath();
                this.ctx.moveTo(startX, startY);
                this.ctx.lineTo(endX, endY);
                this.ctx.stroke();
            }

            // Decorative dots
            this.ctx.fillStyle = `rgba(255, 100, 200, ${0.6 * progress})`;
            for (let i = 0; i < decorPoints; i++) {
                const angle = (Math.PI * 2 / decorPoints) * i + Math.PI / decorPoints;
                const radius = 135 * scale;
                const dotX = x + Math.cos(angle) * radius;
                const dotY = y + Math.sin(angle) * radius;

                this.ctx.beginPath();
                this.ctx.arc(dotX, dotY, 4 * scale * progress, 0, Math.PI * 2);
                this.ctx.fill();
            }
        }
    }

    // Initialize animation when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
        new FaceDrawingAnimation('drawingCanvas');
    });
</script>